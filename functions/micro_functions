#!/bin/bash

function write_micro_conf()
{
  [ -z "$1" ] && return

cat <<EOF>$1
---
name: micro_bosh

network:
  ip: $conf_network_micro_ip
  netmask: $conf_network_netmask
  gateway: $conf_network_gateway
  dns:
  - $conf_network_dns1
  - $conf_network_dns2
  cloud_properties:
    name: $conf_cloud_name

resources:
  persistent_disk: $conf_resources_persistent
  cloud_properties:
    ram: $conf_resources_ram
    disk: $conf_resources_disk
    cpu: $conf_resources_cpu

cloud:
  plugin: vsphere
  properties:
    agent:
      ntp:
       - $conf_network_ntp1
       - $conf_network_ntp2
    vcenters:
      - host: $conf_vcenter_host
        user: $conf_vcenter_user
        password: $conf_vcenter_password
        datacenters:
          - name: $conf_datacenter_name
            vm_folder: $conf_datacenter_vmfolder
            template_folder: $conf_datacenter_templatefolder
            disk_path: $conf_datacenter_deployer_diskpath
            datastore_pattern: $conf_datacenter_datastorepattern
            persistent_datastore_pattern: $conf_datacenter_persistentpattern
            allow_mixed_datastores: $conf_datacenter_mixeddatastores
            clusters:
              - $conf_vcenter_clustername

apply_spec:
  properties:
    vcenter:
      host: $conf_vcenter_host
      user: $conf_vcenter_user
      password: $conf_vcenter_password
      datacenters:
        - name: $conf_datacenter_name
          vm_folder: $conf_datacenter_vmfolder
          template_folder: $conf_datacenter_templatefolder
          disk_path: $conf_datacenter_micro_diskpath
          datastore_pattern: $conf_datacenter_datastorepattern
          persistent_datastore_pattern: $conf_datacenter_persistentpattern
          allow_mixed_datastores: $conf_datacenter_mixeddatastores
          clusters:
            - $conf_vcenter_clustername

EOF
}

function deploy_micro_bosh()
{
  local ret=0

  touch $tmpdir/deploy_micro_bosh.lock

  clear
  
  echo "Downloading BOSH micro stemcell"

  [ -e micro-bosh-stemcell-vsphere-0.6.4.tgz ] ||
    {
    $bosh download public stemcell micro-bosh-stemcell-vsphere-0.6.4.tgz
    ret=$(( $ret + $? ))
    }

  cd $pwd/.uhuru-deployments/$deployment/deployments

  echo "Running: bosh micro deployment micro_bosh"
  $bosh micro deployment micro_bosh
  ret=$(( $ret + $? ))

  echo "Running: bosh micro deploy $pwd/micro-bosh-stemcell-vsphere-0.6.4.tgz"
  $bosh micro deploy $pwd/micro-bosh-stemcell-vsphere-0.6.4.tgz ||
    {
    echo "Running: bosh micro deploy $pwd/micro-bosh-stemcell-vsphere-0.6.4.tgz --update"
    $bosh micro deploy $pwd/micro-bosh-stemcell-vsphere-0.6.4.tgz --update
    ret=$(( $ret + $? ))
    }

  echo "$ret" >$tmpdir/deploy_micro.ret

  rm -f $tmpdir/deploy_micro_bosh.lock

  cd $pwd

  sleep 50

  return $ret
}


function micro_main_menu()
{
local ret=0
local sel="Resources"

while [ $ret -eq 0 ];
do
  $dialog --backtitle "$bgtitle" \
  --title " Micro BOSH Configuration " \
  --default-item "$sel" \
  --cancel-label "Back" \
  --menu "\nSelect which item you want to configure.." 7 0 0 \
  "Resources" "Configure Micro BOSH resources" \
  "Review" "Review deployment manifest" \
  2>$tmpdir/conf_micro_main.out
  ret=$?

  sel=`cat $tmpdir/conf_micro_main.out`
  rm -f $tmpdir/conf_micro_main.out

  [ $ret -eq 0 ] &&
    {
    case "$sel" in
    "Resources") configure_micro_resources ;;
    "Review") edit_file $pwd/.uhuru-deployments/$deployment/deployments/micro_bosh/micro_bosh.yml
      ;;
    esac
    }
done
}

function configure_micro_resources()
{
local ret=0
local sel="Persistent"

while [ $ret -eq 0 ];
do
  $dialog --backtitle "$bgtitle" \
  --title " Resource limits " \
  --default-item "$sel" \
  --cancel-label "Back" \
  --item-help \
  --menu "\nSelect which item you want to configure.\nIn the right column you see the current value." 10 0 0 \
  "Persistent" "$conf_resources_persistent MB" "$help_micro_persistent" \
  "Memory" "$conf_resources_ram MB" "$help_micro_memory" \
  "Disk" "$conf_resources_disk MB" "$help_micro_disk" \
  "CPU" "$conf_resources_cpu" "$help_micro_cpu" \
  2>$tmpdir/conf_resources_menu.out
  ret=$?

  sel=`cat $tmpdir/conf_resources_menu.out`
  rm -f $tmpdir/conf_resources_menu.out

  [ $ret -eq 0 ] &&
    {
    case "$sel" in
    "Persistent") inputbox "Persistent disk" "$help_micro_persistent" "$conf_resources_persistent" && conf_resources_persistent=`cat $tmpdir/input.out` ;;
    "Memory") inputbox "Memory" "$help_micro_memory" "$conf_resources_ram" && conf_resources_ram=`cat $tmpdir/input.out` ;;
    "Disk") inputbox "Disk" "$help_micro_disk" "$conf_resources_disk" && conf_resources_disk=`cat $tmpdir/input.out` ;;
    "CPU") inputbox "CPU" "$help_micro_cpu" "$conf_resources_cpu" && conf_resources_cpu=`cat $tmpdir/input.out` ;;
    esac
    rm -f $tmpdir/input.out
    }
done
}
