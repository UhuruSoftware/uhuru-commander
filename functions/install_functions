#!/bin/bash

function check_system_packages()
{
  progress_install_packages="$progress_failure"
  infobox "Checking if the necessary packages are installed.\nPlease be patient, this wont take long..."
  [ ! -z "`cat /etc/environment|grep /usr/local/ruby/bin`" ] && progress_install_packages=$progress_success

  [ "$progress_install_packages" != "$progress_success" ] &&
    {
    yesno "The system doesent seem to be set up. Do you want to install the necessary packages ?" && install_packages || return 1
    }
  return 0
}

function check_if_bosh_is_deployed()
{
  progress_deploy_bosh=$progress_failure
  progress_deploy_micro_bosh=$progress_failure

  infobox "Checking if micro bosh is deployed.\nPlease be patient, this wont take long..."
  $bosh --user admin --password admin target ${conf_network_micro_ip}:25555 1>/dev/null 2>/dev/null &&
    {
    progress_deploy_micro_bosh=$progress_success
    $bosh_nonint login admin admin 1>/dev/null 2>/dev/null &&
      {
      infobox "Checking if bosh is deployed.\nPlease be patient, this wont take long..."
      [ ! -z "`$bosh deployments 2>/dev/null | grep -w 'bosh'` | grep -w $version_bosh" ] && progress_deploy_bosh=$progress_success
      }
    }
}

function check_progress()
{
#  progress_install_packages=$progress_failure
#  progress_install_micro_stemcell=$progress_failure
#  progress_download_bosh_stemcell=$progress_failure
#  progress_deploy_micro_bosh=$progress_failure
  progress_upload_bosh_stemcell=$progress_failure
  progress_upload_bosh_release=$progress_failure
#  progress_deploy_bosh=$progress_failure
  progress_deploy_cloudfoundry=$progress_failure

  check_system_packages || return 1

  infobox "Checking if Cloud Foundry is deployed.\nPlease be patient, this wont take long..."

  rm -f ~/.bosh_config 2>/dev/null
  $bosh --user admin --password admin target ${conf_bosh_director_ip}:25555 2>/dev/null 1>/dev/null && \
  $bosh_nonint login admin admin 1>/dev/null 2>/dev/null &&
    {
    [ ! -z "`$bosh deployments 2>/dev/null | grep -iw 'cloud-foundry'`" ] && progress_deploy_cloudfoundry=$progress_success
    }

#  infobox "Checking if micro bosh is installed.\nPlease be patient, this wont take long..."
#  $bosh --user admin --password admin target ${conf_network_micro_ip}:25555 1>/dev/null 2>/dev/null && progress_deploy_micro_bosh=$progress_success
#  $bosh_nonint login admin admin 1>/dev/null 2>/dev/null

#  infobox "Checking if BOSH stemcell is uploaded.\nPlease be patient, this wont take long..."
#  [ ! -z "`$bosh stemcells 2>/dev/null | grep '0.6.7'`" ] && progress_upload_bosh_stemcell=$progress_success

#  infobox "Checking if BOSH release is uploaded.\nPlease be patient, this wont take long..."
#  [ ! -z "`$bosh releases 2>/dev/null | grep -w 'uhuru-bosh'`" ] && progress_upload_bosh_release=$progress_success

#  infobox "Checking if BOSH is deployed.\nPlease be patient, this wont take long..."
#  [ ! -z "`$bosh deployments 2>/dev/null | grep -w 'bosh'`" ] && progress_deploy_bosh=$progress_success
}

function install_packages()
{
  local ret=0
  touch $tmpdir/install_packages.lock
  echo "Installing needed packages ..."

  export DEBIAN_FRONTEND=noninteractive

#FIXME: uncomment the first apt-get line, when using 10.04
  apt-get -q -y install gcc g++ build-essential libssl-dev libreadline5-dev zlib1g-dev linux-headers-generic libsqlite3-dev libxslt-dev libxml2-dev imagemagick libmysqlclient-dev libmagick9-dev git-core mysql-server wkhtmltopdf git-core libsqlite3-dev genisoimage 2>&1
#  apt-get -y install gcc g++ build-essential libssl-dev zlib1g-dev linux-headers-generic libsqlite3-dev libxslt-dev libxml2-dev imagemagick libmysqlclient-dev git-core mysql-server wkhtmltopdf git-core libsqlite3-dev genisoimage 2>&1
  ret=$(( $ret + $? ))

  [ ! -e ruby-1.9.2-p290.tar.gz ] && wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p290.tar.gz 2>&1
  ret=$(( $ret + $? ))

  tar -xvzf ruby-1.9.2-p290.tar.gz 2>&1
  ret=$(( $ret + $? ))

  cd ruby-1.9.2-p290/
  ./configure --prefix=/usr/local/ruby 2>&1 && make 2>&1 && make install 2>&1
  ret=$(( $ret + $? ))
  cd $pwd
  
  cur_path=$PATH
  source /etc/environment

  [ -z "`echo $PATH|grep /usr/local/ruby/bin`" ] && PATH="$PATH:/usr/local/ruby/bin"
  echo "PATH=\"$PATH\"" >/etc/environment
  source /etc/environment

  gem install bundler 2>&1
  ret=$(( $ret + $? ))
  gem install rake -v 0.8.7 2>&1
  ret=$(( $ret + $? ))
  gem install aws-sdk -v 1.6.9
  ret=$(( $ret + $? ))
  gem install fog -v 1.6.0
  ret=$(( $ret + $? ))
  gem install bosh_cli -v 1.0.2 2>&1
  ret=$(( $ret + $? ))
  gem install bosh_deployer -v 1.1.0 2>&1
  ret=$(( $ret + $? ))
  gem install rbvmomi 2>&1
  ret=$(( $ret + $? ))
  gem install colorize 2>&1
  ret=$(( $ret + $? ))
  gem install trollop 2>&1
  ret=$(( $ret + $? ))

  gem update --system

#  uninstall
  echo
  echo "Finished installing packages."
  echo "Press ENTER to continue"
  rm -f $tmpdir/install_packages.lock
  echo "$ret" >$tmpdir/install_packages.ret
}

function uninstall()
{
  apt-get -y remove gcc g++ build-essential libssl-dev zlib1g-dev linux-headers-generic libsqlite3-dev libxslt-dev libxml2-dev imagemagick libmysqlclient-dev git-core mysql-server wkhtmltopdf git-core libsqlite3-dev genisoimage --purge
  rm -f ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p290.tar.gz
}

function deploy_cloudfoundry_gui()
{

  clear
  deploy_cloudfoundry

  echo "Press ENTER to continue..."
  read
}

function install_steps()
{
local ret=0
local sel="Setup environment"
save_conf

check_progress

while [ $ret -eq 0 ];
do
  $dialog --backtitle "$bgtitle" \
  --title " Deployment steps " \
  --default-item "$sel" \
  --cancel-label "Back" \
  --item-help \
  --menu "\nSelect the installation step you need to run.\nThe environment must be installed in order to deploy CloudFoundry.\nIf you already have a Cloud Foundry deployment, clicking 'Deploy cloudfoundry will update the current deployment." 12 0 0 \
  "Setup environment" "Current status: $progress_deploy_bosh" "Setup the environment" \
  "Deploy CloudFoundry" "Current status: $progress_deploy_cloudfoundry" "Setup or deploy Cloudfoundry" \
  2>$tmpdir/install_steps_menu.out
  ret=$?

  sel=`cat $tmpdir/install_steps_menu.out`
  rm -f $tmpdir/install_steps_menu.out

  [ $ret -eq 0 ] &&
    {
    case "$sel" in
    "Setup environment") install_everything ;;
    "Deploy Cloudfoundry") deploy_cloudfoundry_gui ;;
    esac
    }
done
}

function check_vsphere_prerequistes()
{
  infobox "Prerequisites" "Checking vSphere prerequisites"

  echo -e "It seems that all vSphere prerequisites are met. Here is the output log :\n\n" >$tmpdir/vsphere_prerequisites.out

  ruby $pwd/bosh_checker/verify_deployment.rb \
  --address "$conf_vcenter_host" \
  --user "$conf_vcenter_user" \
  --password "$conf_vcenter_password" \
  --datacenter "$conf_datacenter_name" \
  --cluster "$conf_vcenter_clustername" \
  --datastore "$conf_datacenter_datastorepattern" \
  --template-folder "$conf_datacenter_templatefolder" \
  --vm-folder "$conf_datacenter_vmfolder" \
  1>>$tmpdir/vsphere_prerequisites.out 2>$tmpdir/vsphere_prerequisites.err ||
    {
    msgbox "Error" "It seems that some of the vSphere prerequisites are not met. Here is the error log :\n\n`cat $tmpdir/vsphere_prerequisites.err`"
    rm -f $tmpdir/vsphere_prerequisites.*
    return 1
    } && $dialog --backtitle "$bgtitle" --title " Success " --textbox $tmpdir/vsphere_prerequisites.out 0 0

  rm -f $tmpdir/vsphere_prerequisites.*
  return 0
}

function confirm_install()
{
local needed_ram=$(( $cloudfoundry_pool_small_ram * $cloudfoundry_pool_small_size + $cloudfoundry_pool_medium_ram * $cloudfoundry_pool_medium_size + $cloudfoundry_pool_large_ram * $cloudfoundry_pool_large_size + $cloudfoundry_pool_tiny_ram * $cloudfoundry_pool_tiny_size + $cloudfoundry_pool_deas_ram * $cloudfoundry_deas_count))
local needed_disk=$(( $cloudfoundry_pool_small_disk * $cloudfoundry_pool_small_size + $cloudfoundry_pool_medium_disk * $cloudfoundry_pool_medium_size + $cloudfoundry_pool_large_disk * $cloudfoundry_pool_large_size + $cloudfoundry_pool_tiny_disk * $cloudfoundry_pool_tiny_size + $cloudfoundry_pool_deas_disk * $cloudfoundry_deas_count ))
local needed_cpu=$(( $cloudfoundry_pool_small_cpu * $cloudfoundry_pool_small_size + $cloudfoundry_pool_medium_cpu * $cloudfoundry_pool_medium_size + $cloudfoundry_pool_large_cpu * $cloudfoundry_pool_large_size + $cloudfoundry_pool_tiny_cpu * $cloudfoundry_pool_tiny_size + $cloudfoundry_pool_deas_cpu * $cloudfoundry_deas_count ))
local needed_ram_gb=$(( $needed_ram / 1000 + 1 ))
local needed_disk_gb=$(( $needed_disk / 1000 + 1))
local mixed=""

[ "$conf_datacenter_datastorepattern" != "$conf_datacenter_persistentpattern" ] && mixed="and <$color_underline$conf_datacenter_persistentpattern$color_no_underline>"

  $dialog --backtitle "$bgtitle" \
	  --title " Confirmation " \
	  --yes-label "OK" \
	  --no-label "Back" \
	  --defaultno \
	  --colors \
	  --yesno "Before we continue please make sure the follow conditions are met :\n
  -          The folder <$color_underline$conf_datacenter_vmfolder$color_no_underline> exists in the cluster <$color_underline$conf_vcenter_clustername$color_no_underline>\n
  -          The folder <$color_underline$conf_datacenter_templatefolder$color_no_underline> exists in the cluster <$color_underline$conf_vcenter_clustername$color_no_underline>\n
  -          The folder <$color_underline$conf_datacenter_deployer_diskpath$color_no_underline> exists in the datastores having the name pattern <$color_underline$conf_datacenter_datastorepattern$color_no_underline> $mixed\n
  -          The folder <$color_underline$conf_datacenter_micro_diskpath$color_no_underline> exists in the datastores having the name pattern <$color_underline$conf_datacenter_datastorepattern$color_no_underline> $mixed\n
  -          The folder <$color_underline$conf_datacenter_bosh_diskpath$color_no_underline> exists in the datastores having the name pattern <$color_underline$conf_datacenter_datastorepattern$color_no_underline> $mixed\n
  -          The domain <$color_underline$cloudfoundry_domain$color_no_underline> points to the following IP: <$color_underline$cloudfoundry_ip_router$color_no_underline>\n\n
Beside these, you will need :\n
RAM : $needed_ram MB ($needed_ram_gb GB)\n
DISK: $needed_disk MB ($needed_disk_gb GB)\n
CPUs: $needed_cpu\n\n

   Press OK to continue" 0 0 &&
   {
   check_if_bosh_is_deployed && check_vsphere_prerequistes
   }
}


function install_everything()
{
  deploy_micro_bosh ||
    {
    echo "Something wrong happened. Press ENTER to continue"
    read
    }

  upload_bosh_stemcell ||
    {
    echo "Something wrong happened. Press ENTER to continue"
    read
    }

  upload_bosh_release ||
    {
    echo "Something wrong happened. Press ENTER to continue"
    read
    }

  deploy_bosh

  echo "Press ENTER to continue"
  read
}
